generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== User Model =====
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  role          UserRole?
  isOnboarded   Boolean   @default(false)
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  exams       Exam[]           @relation("CreatedExams")
  submissions Submission[]
  enrollments ExamEnrollment[]
  results     ExamResult[]
  sessions    Session[]
  accounts    Account[]

  // Relation for Groups
  createdGroups Group[]       @relation("TeacherGroups")
  memberGroups  GroupMember[]

  @@map("user")
}

enum UserRole {
  TEACHER
  STUDENT
}

// ===== Exam System =====
model Exam {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator     User             @relation("CreatedExams", fields: [creatorId], references: [id])
  creatorId   String
  problems    ExamProblem[]
  enrollments ExamEnrollment[]
  submissions Submission[]
  results     ExamResult[]
  startDate   DateTime
  endDate     DateTime
}

model ExamProblem {
  id        String  @id @default(uuid())
  order     Int
  exam      Exam    @relation(fields: [examId], references: [id])
  examId    String
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId String
}

model Problem {
  id           String        @id @default(uuid())
  number       Int           @unique
  title        String
  description  String
  difficulty   String
  source       String        @default("Unknown")
  examProblems ExamProblem[]
  tags         ProblemTag[]
  testCase     TestCase? // one-to-one relation
}

model TestCase {
  id        String   @id @default(uuid())
  cases     Json // Array of {input: string, output: string, isHidden: boolean}
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId String   @unique // one-to-one relationship
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submission {
  id        String   @id @default(uuid())
  code      String
  language  String
  createdAt DateTime @default(now())

  exam   Exam   @relation(fields: [examId], references: [id])
  examId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model ExamEnrollment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  exam   Exam   @relation(fields: [examId], references: [id])
  examId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([examId, userId])
}

model ExamResult {
  id        String   @id @default(uuid())
  score     Int
  createdAt DateTime @default(now())

  exam   Exam   @relation(fields: [examId], references: [id])
  examId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// ===== Better Auth Models =====
model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

// ===== Student Groups =====
model Group {
  id          String        @id @default(uuid())
  name        String
  description String?
  creator     User          @relation("TeacherGroups", fields: [creatorId], references: [id])
  creatorId   String
  members     GroupMember[]
  noOfMembers Int           @default(0)
  createdAt   DateTime      @default(now())
}

model GroupMember {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  addedAt   DateTime @default(now())

  @@unique([groupId, studentId])
}

// ===== Tags System =====
model Tag {
  id       String       @id @default(uuid())
  name     String       @unique
  problems ProblemTag[]
}

model ProblemTag {
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  @@id([problemId, tagId])
}
